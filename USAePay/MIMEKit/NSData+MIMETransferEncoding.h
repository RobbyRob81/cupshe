//
//  NSData+MIMETransferEncoding.h
//
//  Created by Jeff Hay on 3/28/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


/**
 * Category to support encoding and decoding NSData objects via any of the standard MIME transfer encoding scheames (_7bit_, _8bit_,
 * _binary_, _base64_, and _Quoted-Printable_).  These transfer encodings are alternate methods of encoding 8-bit binary data into
 * formats that will pass through potentially 7-bit internet processing, as described in [RFC 2045](http://tools.ietf.org/html/rfc2045#section-6).  
 *
 * This category includes support for encoding and decoding all defined MIME transfer encodings, and defines the `MIMETransferEncodingStyle`
 * enum to allow for easy encoding style comparison and specification.  Descriptions of the various values taken from the RFC:
 *
 * - _7bit_, `MIMETransferEncodingStyle7Bit`,
 *      Represented as relatively short lines with 998 octets or less between `CRLF` line separation sequences. No octets with decimal values 
 *      greater than 127 are allowed and neither are `NUL`s (octets with decimal value 0).  `CR` (decimal value 13) and `LF` (decimal value 10) 
 *      octets only occur as part of `CRLF` line separation sequences.
 *
 * - _8bit_, `MIMETransferEncodingStyle8Bit`,
 *      Represented as relatively short lines with 998 octets or less between `CRLF` line separation sequences, but octets with decimal values 
 *      greater than 127 may be used.  As with _7bit_ `CR` and `LF` octets only occur as part of `CRLF` line separation sequences and no `NUL`s 
 *      are allowed.
 *
 * - _binary_, `MIMETransferEncodingStyleBinary`,
 *      Data where any sequence of octets whatsoever is allowed.  No restrictions on line length, control characters, or values.  This is raw
 *      binary data without regard to endian-ness.
 *
 * - _Quoted-Printable_, `MIMETransferEncodingStyleQuoted`,
 *      Represented as octets that correspond to printable characters in the US-ASCII character set.  Data is encoded in such a way that
 *      the resulting octets are unlikely to be modified by mail transport. If the data being encoded are mostly US-ASCII text, the encoded form
 *      of the data remains largely recognizable by humans.  
 *
 * - _base64_, `MIMETransferEncodingStyleBase64`,
 *      Represented as arbitrary sequences of octets in a form that need not be humanly readable.  The encoding and decoding algorithms are 
 *      guarnteed to reproduce the data exactly, but the encoded data are consistently about 33 percent larger than the unencoded data.
 *
 * - `MIMETransferEncodingStyleOther`
 *      Indicates the data is encoded in a method not defined in the RFC, or is otherwise unknown.
 *
 * - _identity_, `MIMETransferEncodingStyleIdentity`
 *      While not defined in the RFC, some MIME implementations use this as a synonym for `MIMETransferEncodingStyleBinary`.
 **/
typedef enum _MIMETransferEncodingStyle {
	MIMETransferEncodingStyle7Bit = 0,
    MIMETransferEncodingStyle8Bit,
    MIMETransferEncodingStyleBinary,
    MIMETransferEncodingStyleIdentity, // NOTE: "identity" is not a defined Content Transfer Encoding for MIME, but is used by some web servers instead of "binary"
    MIMETransferEncodingStyleQuoted,
    MIMETransferEncodingStyleBase64,
    MIMETransferEncodingStyleOther
} MIMETransferEncodingStyle;

#import <Foundation/Foundation.h>

@interface NSData (MIMETransferEncoding)

/** @name Encoding Style Determination */

/**
 * Translate a MIME Content-Transfer-Encoding string into a MIMETransferEncodingStyle enumerated type
 * \param String indicating MIME Content-Transfer-Encoding value (i.e., from MIME header)
 * \returns Encoding style value
 * \sa +stringForTransferEncodingStyle:
 **/
+(MIMETransferEncodingStyle) transferEncodingStyleFromString:(NSString *)encodingStyleString;

/**
 * Translate a MIME Content-Transfer-Encoding string into a MIMETransferEncodingStyle enumerated type
 * \param String indicating MIME Content-Transfer-Encoding value (i.e., from MIME header)
 * \returns Encoding style value
 * \sa -stringForTransferEncodingStyle:
 **/
-(MIMETransferEncodingStyle) transferEncodingStyleFromString:(NSString *)encodingStyleString;

/**
 * Translate a MIMETransferEncodingStyle enumated type value into a string suitable for spcifing a MIME Content-Transfer-Encoding header
 * \param encodingStyle Encoding style to translate to a MIME Content-Transfer-Encoding header string
 * \returns String indicating transfer encoding method, suitable for use as a MIME Content-Transfer-Encoding header
 * \sa +transferEncodingStyleFromString: 
 **/
+(NSString *) stringForTransferEncodingStyle:(MIMETransferEncodingStyle)encodingStyle;

/**
 * Translate a MIMETransferEncodingStyle enumated type value into a string suitable for spcifing a MIME Content-Transfer-Encoding header
 * \param encodingStyle Encoding style to translate to a MIME Content-Transfer-Encoding header string
 * \returns String indicating transfer encoding method, suitable for use as a MIME Content-Transfer-Encoding header
 * \sa -transferEncodingStyleFromString:
 **/
-(NSString *) stringForTransferEncodingStyle:(MIMETransferEncodingStyle)encodingStyle;

/** @name Data encoding and decoding */

/**
 * Convenience method to encode the receiver's data to any known MIME encoding style.    In the case of `MIMETransferEncodingStyleBinary`
 * and `MIMETransferEncodingStyleIdentity`, simply returns a reference to the receiver.  In the case of `MIMETransferEncodingStyleOther`,
 * return nils. In all other cases, returns a reference to a new NSData instance containing the encoded data.
 * \param encodingStyle The encoding that the receiver's data will be encoded into
 * \returns The receiver's data encoded in the specified style
 */
-(NSData *) encodeToStyle:(MIMETransferEncodingStyle)encodingStyle;

/**
 * Convenience method to decode the receiver's data from any known MIME encoding style.  In the case of `MIMETransferEncodingStyleBinary`
 * and `MIMETransferEncodingStyleIdentity`, simply returns a reference to the receiver.  In the case of `MIMETransferEncodingStyleOther`,
 * return nils. In all other cases, returns a reference to a new NSData instance containing the decoded data.
 * \param encodingStyle The encoding that the receiver's data is encoded in
 * \returns The receiver's data decoded from the specified style
 */
-(NSData *) decodeFromStyle:(MIMETransferEncodingStyle)encodingStyle;


/** 
 * Return a new NSData instance containing the data of the receiver encoded in MIME _7bit_ style.  All byte values greater than
 * 127 and values of 0, 11 (`LF`), and 13 (`CR`) are stripped from the data, and `CRLF` are inserted every 950 characters.
 * \returns The receiver's data encoded to _7bit_
 **/
-(NSData *) encodeTo7Bit;

/**
 * Return a new NSData instance containing the data of the receiver decoded from MIME _7bit_ style.  All `CRLF` pairs are stripped from
 * the data.  Note that since `encodeTo7Bit` is potentially destructive, `[[self encodeTo7Bit] decodeFrom7Bit]` is not guarenteed to
 * return identical data
 * \returns The receiver's data decoded from _7bit_
 **/
-(NSData *) decodeFrom7Bit;

/**
 * Return a new NSData instance containing the data of the receiver encoded in MIME _8bit_ style.  All byte values of 0, 11 (`LF`), and 13 
 * (`CR`) are stripped from the data, and `CRLF` are inserted every 950 characters.
 * \returns The receiver's data encoded to _8bit_
 **/
-(NSData *) encodeTo8Bit;

/**
 * Return a new NSData instance containing the data of the receiver decoded from MIME _8bit_ style.  All `CRLF` pairs are stripped from
 * the data.  Note that since `encodeTo8Bit` is potentially destructive, `[[self encodeTo8Bit] decodeFrom8Bit]` is not guarenteed to
 * return identical data
 * \returns The receiver's data decoded from _8bit_
 **/
-(NSData *) decodeFrom8Bit;

/**
 * Return a new NSData instance containing the data of the receiver encoded in base64.  Uses 
 * [Matt Gallagher's NSData+Base64](http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html) category 
 * to perform the decoding. 
 * \returns The receiver's data encoded to base64
 **/
-(NSData *) decodeFromBase64;

/**
 * Return a new NSData instance containing the data of the receiver decoded from base64.  Uses 
 * [Matt Gallagher's NSData+Base64](http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html) category 
 * to perform the encoding. `[[self encodeToBase64] decodeFromBase64]` will return identical data.
 * \returns The receiver's data encoded from base64
 **/
-(NSData *) encodeToBase64;

/**
 * Return a new NSData instance containing the data of the receiver encoded in MIME _Quoted-Printable_ style.
 * \returns The receiver's data encoded to _Quoted-Printable_
 **/
-(NSData *) decodeFromQuotedPrintable;

/**
 * Return a new NSData instance containing the data of the receiver decoded from MIME _Quoted-Printable_ style. 
 * `[[self encodeToQuotedPrintable:] decodeFromQuotedPrintable]` will return identical data.
 * \param isText YES treats the receiver's data as text characters (most common), NO treats the receiver's data as binary data
 * \returns The receiver's data encoded from _Quoted-Printable_
 **/
-(NSData *) encodeToQuotedPrintable:(BOOL)isText;

@end
