//
//  PKMIMEMessage+XOP-XML.h
//
//  Created by Jeff Hay on 4/5/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


#import "PKMIMEMessage.h"

#define kXOPXML_CONTENT_TYPE @"application/xop+xml; charset=UTF-8; type=\"text/xml\""

/**
 * **XOP+XML**
 *
 * `PKMIMEMessage` can be used to natively encode and decode messages XOP+XML messages as specified in the W3C
 * [XML-binary Optimized Packaging](http://www.w3.org/TR/xop10/) (XOP) Recommendation.  XOP+XML is a standard for 
 * serializing XML messages containing binary content (images, audio, etc.).  Instead of encoding the binary content 
 * in base64 (or other scheme), the content is replaced with a special XML reference element (`<xop:Include>`) that 
 * points to a MIME ContentID containing the binary data.  The entire XML message is then encoded as a multipart MIME 
 * message with the XML document as the root part and the binary data as additional parts (encoded with a binary encoding).
 *
 * `PKMIMEMessage+XOP-XML` includes methods that allow XOP+XML documents to be created and parsed directly without first 
 * passing  through a base64 encoding step. This allows efficient implementation of the W3C's 
 * [Message Transmission Optimization Mechanism](http://www.w3.org/TR/soap12-mtom/) (MTOM) and other 
 * web-services messaging schemes.
 **/
@interface PKMIMEMessage (XOPXML)

/** @name XOP+XML Reference Lookup */

/**
 *  Return the part of this MIME message refered to by the given XML string
 *
 * Treats the provided _xopReference_ string as aribrary XML, and looks for the first `<xop:Include>`
 * reference in the XML string.  Extracts the ContentID for the reference and returns the
 * data for the message part with the corresponding ContentID, or nil.
 *
 * XML processing is done via contentIDForXOPReference
 *
 * \param xopReference XML string to parse for `<xop:Include>` element
 * \returns MIME data for found reference, or nil
 * \sa contentIDForXOPReference **/
-(PKMIMEData *) partDataForXOPReference:(NSString *)xopReference;

/**
 * Scan a given XML string for XOP+XML references and return an array of all found references
 *
 * Treats the provided _xopReference_ string as aribrary XML, and looks for any `<xop:Include>`
 * references in the XML string.  For each found reference, extracts the ContentID string for
 * the MIME part containing the referenced data.  Returns an array of all found ContentID references,
 * in the order they appear in the _xopReference_.
 *
 * If the _pendantic_ parameter is YES, then any found `<xop:Include>` elements are only counted as
 * valid XOP+XML references if they fully conform to the [XOP+XML Standard](http://www.w3.org/TR/xop10/).
 * (if their XML namespace is correct, and the reference is an `href` reference with a `cid:` prefix).
 * If _pendantic_ is NO, then any found `<xop:Include>` reference is treated as if it fully comforms.
 *
 * \param xopReference XML string to parse for `<xop:Include>` elements
 * \param pedantic Should references only be valid if they strictly conform to the standard?
 * \returns Array of MIME ContentID strings
 * \sa contentIDForXOPReference
 * \sa partDataForXOPReference
 **/
+(NSArray *) contentIDsFromXOPReferences:(NSString *)xopReference pedantic:(BOOL)pedantic;

/**
 * Return the MIME ContentID for the first found XOP+XML reference in the given XML string
 *
 * Treats the provided _xopReference_ string as aribrary XML, and looks for the first `<xop:Include>`
 * reference in the XML string.  Returns the MIME ContentID for the found reference, or `nil` if
 * no references are found.
 *
 * The search for references is performed via contentIDsFromXOPReferences:pedantic: with _pedantic_ set
 * to NO.
 *
 * \param xopReference XML string to parse for `<xop:Include>` element
 * \returns MIME ContentID string of found reference, or nil
 * \sa partDataForXOPReference
 **/
+(NSString *) contentIDForXOPReference:(NSString *) xopReference;

/** @name XOP+XML Reference Generation */

/**
 *  Return the proper contentType for a MIME Data part containing XOP+XML data
 *
 *  The [XOP+XML Standard](http://www.w3.org/TR/xop10/) requires MIME data containing XOP+XML 
 *  data to have a specific ContentType.  This class method returns the contentType for XOP+XML
 *  as a `PKContentType` instance.  
 *
 *  The contentType is also defined as a string in the `kXOPXML_CONTENT_TYPE` preprocessor definition
 *
 *  \returns The proper contentType for XOP+XML data
 **/
+(PKContentType *) xopXMLContentType;

/**
 * Return the text of the XML element to refer to XOP+XML data
 *
 * [XOP+XML](http://www.w3.org/TR/xop10/) specifies a `<xop:Include>` XML element to refer to external
 * binary data within an XML document by the data's ContentID tag.  This method returns the approrpriate
 * `<xop:Include>` element text to refer to the specified MIME data part.
 *
 * \param data MIME data to which the `<xop:Include>` element should refer
 * \returns text of the `<xop:Include>` element to refer to the specified data
 * \sa addPartWithXOPReference
 **/
+(NSString *) xopReferenceForData:(PKMIMEData *)data;

/**
 * Add the specified data to this message and return an `<xop:Include>` reference to it
 *
 * Appends the specified MIME data to the MIME message with binary encoding, and return 
 * the reference to it (generted via xopReferenceForData)
 * 
 * \param data MIME data to append to this message
 * \returns text of the `<xop:Include>` element to refer to the newly-added data
 * \sa xopReferenceForData
 **/
-(NSString *) addPartWithXOPReference:(PKMIMEData *)data;

@end
