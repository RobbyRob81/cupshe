//
//  PKContentType.h
//
//  Created by Jeff Hay on 3/27/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


#if !TARGET_OS_MAC
#import <UIKit/UIKit.h>
#endif

/**
 * Encapsulates a MIME Content-Type header.
 *
 * By design, the overall type of the MIME Content-Type can **not** be changed after it is created.  However, the sub type can be changed as needed.
 *
 * @warning _PKConentType_ varies from the MIME standard in [RFC 2045](http://tools.ietf.org/html/rfc2045#section-5) in the following ways:
 *
 *   - Does not handle Content-Type strings with parameters that require quoting (i.e., with invalid characters such as "=")
 *
 *   - Does not handle parameters with comments properly
 **/

@interface PKContentType : NSObject
{
    NSString *_contentTypeString;
    NSMutableDictionary *_contentParameters;
}

/** @name Properties */

/**
 * The MIME media type.  This is a string such as "image/png" or "text/plain" that indicates both the general type ("image" or "text") and 
 * specific subtype/format ("png", "plain").  This property is computed from attributes specified at object instaiation and otherwise specified
 **/
@property (nonatomic, readonly) NSString *mediaType;

/**
 * Dictionary containing parameters to the MIME mediaType.  These appear in the Cotent-Type header as semicolon-seperated lists of `name`=`value` 
 * tuples.  Most implementations will not need to access this property directly.
 */
@property (nonatomic, readonly) NSMutableDictionary *parameters;

/** @name Object Instantiation */

/**
 * The designated initializer.  Creates a new instance initialized to default values per [RFC 2045](http://tools.ietf.org/html/rfc2045#section-5)
 * \returns Instance initialized to a mediaType of `text/plain` and `us-ascii` encoding.
 */
-(id) init;

/**
 * Create a new PKContentType instance with a given MIME media type
 * \param contentString MIME media type to use for initialization.  This string may also contain any number of parameters as semicolon-seperated 
 *        lists of `name`=`value` tuples.  Thus, this method can be used to create a PKContentType instance from the value of a MIME Content-Type
 *        header.
 * \returns Instance initialized to the given MIME media type
 **/
-(id) initWithString:(NSString *)contentString;

/**
 * Create a new PKContentType instance with a MIME media type of `text/plain` using the specified string encoding
 * \param encoding String encoding to use
 * \returns Instance initialized to `text/plain` with the specified string encoding
 **/
-(id) initWithEncoding:(NSStringEncoding)encoding;

/**
 * Create a new PKContentType instance with a given MIME media type
 * \param contentString MIME media type to use for initialization.  This string may also contain any number of parameters as semicolon-seperated 
 *        lists of `name`=`value` tuples.  Thus, this method can be used to create a PKContentType instance from the value of a MIME Content-Type
 *        header.
 * \returns Instance initialized to the given MIME media type
 **/
+(PKContentType *) contentTypeFromString:(NSString *)contentString;

/**
 * Create a new PKContentType instance with a MIME media type of `text/plain` using the specified string encoding
 * \param encoding String encoding to use
 * \returns Instance initialized to `text/plain` with the specified string encoding
 **/
+(PKContentType *) contentTypeFromEncoding:(NSStringEncoding)encoding;

/** @name Setting Parameter Values */

/**
 * Add a parameter with the given name and value.  
 *
 * Sets the value of the parameter _name_ to _value_.  If the _name_ parameter already has a value, the given _value_ will override the
 * current setting.  If _value_ is `nil`, the parameter is removed.
 *
 * Leading and trailing whitespace and equals characters (`=`), if present, are removed from both _name_ and _value_
 *
 * \param name Parameter name to set
 * \param value New value for the named parameter
 **/
-(void) setParameterWithName:(NSString *)name andValue:(NSString *)value;

/**
 * Add one or more parameters stored in an array of `name`=`value` tuples.
 *
 * Each NSString-based member of _attributes_ is split on the first occurance of the equals sign character (`=`).  If two parts are found, 
 * these are taken to be _name_ and _value_ strings for a parameter and are added via addParameterWithName:andValue:.  Any invalid members
 * of _attributes_ are sliently ignored.
 *
 * \param attributes Array containing `name`=`value` tuples for the parameters to set
 **/
-(void) setParametersFromArray:(NSArray *)attributes;

/**
 * Add one or more parameters defined in a string.
 *
 * Parses _attributeString_ as a MIME Content-Type header string.  That is, the string is seperated into sections delimited by the semi-colon
 * character (`;`) and the resulting array of sections is added via addParametersFromArray:.
 **/
-(void) setParametersFromString:(NSString *)attributeString;

/**
 * Set the value of the `charset` parameter to a given string.
 *
 * `charset` is a common parameter that specifies string chacter set to use.
 *
 * \param charSet The MIME `charset` parameter string to use
 * \see charSet
 * \sa setCharSetEncoding:
 **/
-(void) setCharSet:(NSString *)charSet;

/**
 * Set the value of the `charset` parameter to a given NSStringEncoding value.
 *
 * `charset` is a common parameter that specifies string chacter set to use.  This method allows setting the `charset` parameter via 
 * a mapping to NSStringEncoding values as explained under charSet.
 *
 * \param charSet The NSStringEncoding value to use for `charset`
 * \see charSet
 * \sa setCharSetEncoding:
 **/
-(void) setCharSetEncoding:(NSStringEncoding)encoding;

/**
 * Set the boundary string to use for multipart MIME types
 *
 * The various parts of a `multipart` MIME document are seperated in the output text by the specified unique string.  This parameter is set
 * to a default value (a generated Universally Unique IDentifier) at object instaniation, so does not need to be set manually but can be to 
 * set a known boundary value.
 *
 * \param bounday The boundary string to use
 **/
-(void) setBoundary:(NSString *)boundary;

/** @name Querying Parameter Values */

/**
 * Get the currently-defined `charset` parameter string
 *
 * `charset` is a common parameter that specifies string chacter set to use.  [RFC 2045](http://tools.ietf.org/html/rfc2045#section-5) specifies
 * the following valid character set names, which are equivilient to the following NSStringEncoding types:
 *
 * - *"UTF-8"*
 *      8-bit Unicode string encoding, corresponding to `NSUTF8StringEncoding`
 * - *"UTF-16"*  
 *      16-bit Unicode string encoding, corresponding to `NSUTF16StringEncoding`
 * - *"UTF-16BE"*
 *      16-bit Unicode big-endian string encoding, corresponding to `NSUTF16BigEndianStringEncoding`
 * - *"UTF-16LE"*
 *      16-bit Unicode little-endian string encoding, corresponding to `NSUTF16LittleEndianStringEncoding`
 * - *"UTF-32"*
 *      32-bit Unicode string encoding, corresponding to `NSUTF32StringEncoding`
 * - *"UTF-32BE"*
 *      32-bit Unicode big-endian string encoding, corresponding to `NSUTF32BigEndianStringEncoding`
 * - *"UTF-32LE"*
 *      32-bit Unicode little-endian string encoding, corresponding to `NSUTF32LittleEndianStringEncoding`
 * - *"ISO-8859-1"*
 *      ISO-8859-1 "Latin 1" Unicode string encoding, corresponding to `NSISOLatin1StringEncoding`
 * - *"ISO-8859-2"*
 *      ISO-8859-2 "Latin 2" Unicode string encoding, corresponding to `NSISOLatin2StringEncoding`
 * - *"EUC-JP"*
 *      8-bit Japanese EUC string encoding, corresponding to `NSJapaneseEUCStringEncoding`
 * - *"Shift_JIS"*
 *      8-bit Shift-JID Japanese string encoding, corresponding to `NSShiftJISStringEncoding`
 * - *"ISO-2022-JP"*
 *      ISO-2022 Japanese string encoding, corresponding to `NSISO2022JPStringEncoding`
 * - *"windows-1250"*
 *      Windows Code Page 1250 string encoding, corresponding to `NSWindowsCP1250StringEncoding`
 * - *"windows-1251"*
 *      Windows Code Page 1251 string encoding, corresponding to `NSWindowsCP1251StringEncoding`
 * - *"windows-1252"*
 *      Windows Code Page 1252 string encoding, corresponding to `NSWindowsCP1252StringEncoding`
 * - *"windows-1253"*
 *      Windows Code Page 1253 string encoding, corresponding to `NSWindowsCP1253StringEncoding`
 * - *"windows-1254"*
 *      Windows Code Page 1254 string encoding, corresponding to `NSWindowsCP1254StringEncoding`
 *
 * \returns The currently-set MIME `charset` parameter string
 * \sa charSetEncoding
 **/ 
-(NSString *) charSet;

/**
 * Get the currently-defined `charset` parameter string as a NSStringEncoding value
 *
 * `charset` is a common parameter that specifies string chacter set to use.  [RFC 2045](http://tools.ietf.org/html/rfc2045#section-5) specifies
 * a series of valid character set names, which are mapped to NSStringEncoding values as explained for charSet
 *
 * \returns The currently-set MIME `charset` parameter as a NSStringEncoding value
 * \sa charSet
 **/
-(NSStringEncoding) charSetEncoding;

/**
 * The boundary string to use for multipart MIME types
 *
 * The various parts of a `multipart` MIME document are seperated in the output text by the specified unique string.  
 *
 * \returns bounday The boundary string used to separate `multipart` MIME documents
 **/
-(NSString *) boundary;

/**
 * Retreive the value for a named parameter
 *
 * \returns The value of the parameter named _name_, if present.  Returns `nil` if the parameter _name_ is not defined.
 */
-(NSString *)parameterWithName:(NSString *)name;

/** @name Removing Parameters */

/**
 * Remove the parameter with the specified name
 *
 * The parameter _name_, if defined, is removed.  If _name_ is not defined, no action is taken.
 */
-(void) removeParameterWithName:(NSString *)name;

/**
 * Remove all defined parameters.
 *
 * Clears all defined parameters
 **/
-(void) removeParameters;

/** @name Media and Content Type Queries */

/**
 * The MIME Content-Type header value string
 *
 * \return The full MIME Content-Type header value string listing media type and all parameters
 **/
-(NSString *)string;

/**
 * The major MIME media type
 *
 * MIME media types are always a major type (`image`, `text`, `auido`, etc.) and a minor subtype ('png', 'jpeg', 'wav', 'xml', etc.).
 * The combination of type and subtype completely defines the meaning of the MIME data.  This method returns the major MIME type.
 *
 * \returns The MIME type string
 **/
-(NSString *)type;

/**
 * The minor MIME media type
 *
 * MIME media types are always a major type (`image`, `text`, `auido`, etc.) and a minor subtype ('png', 'jpeg', 'wav', 'xml', etc.).
 * The combination of type and subtype completely defines the meaning of the MIME data.  This method returns the minor MIME subtype.
 *
 * \returns The MIME subtype string
 **/
-(NSString *)subType;

/**
 * Set the minor MIME media type
 *
 * MIME media types are always a major type (`image`, `text`, `auido`, etc.) and a minor subtype ('png', 'jpeg', 'wav', 'xml', etc.).
 * The combination of type and subtype completely defines the meaning of the MIME data.
 *
 * \param subType The MIME subtype string to use
 **/
-(void) setSubType:(NSString *)subType;

/**
 * Is the MIME data text?
 * \returns YES if the MIME type is `text`, NO otherwise
 * \sa type
 **/
-(BOOL) isText;

/**
 * Is the MIME data image data?
 * \returns YES if the MIME type is `image`, NO otherwise
 * \sa type
 **/
-(BOOL) isImage;

/**
 * Is the MIME data audio data?
 * \returns YES if the MIME type is `audio`, NO otherwise
 * \sa type
 **/
-(BOOL) isAudio;

/**
 * Is the MIME data vido data?
 * \returns YES if the MIME type is `video`, NO otherwise
 * \sa type
 **/
-(BOOL) isVideo;

/**
 * Is the MIME data application data?
 * \returns YES if the MIME type is `application`, NO otherwise
 * \sa type
 **/
-(BOOL) isApplication;

/**
 * Is the MIME data raw data bytes?
 *
 * If the MIME type is `application`, it should usually be treated as raw data bytes.  Thus, this method is an
 * alternative to isApplication.
 *
 * \returns YES if the MIME type is `application`, NO otherwise
 * \sa type
 **/
-(BOOL) isData;

/**
 * Is the MIME data a multipart document?
 * \returns YES if the MIME type is `multipart`, NO otherwise
 * \sa type
 **/
-(BOOL) isMultipart;

/**
 * Is the MIME data messages?
 * \returns YES if the MIME type is `message`, NO otherwise
 * \sa type
 **/
-(BOOL) isMessage;


@end
