//
//  PKMIMEMessage+XOP-XML.m
//
//  Created by Jeff Hay on 4/5/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


#import "PKMIMEMessage+XOP-XML.h"

#import "PKContentType.h"

@implementation PKMIMEMessage (XOPXML)

+(PKContentType *) xopXMLContentType
{
    return [PKContentType contentTypeFromString:kXOPXML_CONTENT_TYPE];
}

#pragma mark - XOP+XML Reference Generation

+(NSString *) xopReferenceForData:(PKMIMEData *)data 
{
    return  [NSString stringWithFormat:@"<xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\" href=\"cid:%@\"/>", 
                      data.contentID];    
}

-(NSString *) addPartWithXOPReference:(PKMIMEData *)data
{
    data.transferEncoding = MIMETransferEncodingStyleBinary;
    [self addPart:data];
    
    return [PKMIMEMessage xopReferenceForData:data];
}

#pragma mark - XOP+XML Reference Lookup

-(PKMIMEData *) partDataForXOPReference:(NSString *)xopReference
{
    return [self partDataWithID:[PKMIMEMessage contentIDForXOPReference:xopReference]];
}

+(NSString *) contentIDForXOPReference:(NSString *) xopReference
{
    return [[self contentIDsFromXOPReferences:xopReference pedantic:NO] objectAtIndex:0];
}

+(NSArray *) contentIDsFromXOPReferences:(NSString *)xopReference pedantic:(BOOL)pedantic
{
    NSMutableArray *references = [[NSMutableArray alloc] init];

    NSError *error = NULL;
    
    // Extract any "Include" elements, also extracting any include namespace decoration
    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"<(([a-z]*):)?Include(.*?)(/>|</\\1Include>)"
                                                                           options:NSRegularExpressionCaseInsensitive
                                                                             error:&error];
    
    NSArray *matches = [regex matchesInString:xopReference
                                      options:0
                                        range:NSMakeRange(0, [xopReference length])];
    for (NSTextCheckingResult *match in matches)
    {
        BOOL namespaceMatch = NO;
        NSString *reference = nil;
        
        NSString *nameSpace = [xopReference substringWithRange:[match rangeAtIndex:2]];
        NSString *attributes = [xopReference substringWithRange:[match rangeAtIndex:3]];
        
        // Check each attribute name=value pair, checking for href and namespace match
        regex = [NSRegularExpression regularExpressionWithPattern:@"([a-z:]*)=\"(.*?)\""
                                                          options:NSRegularExpressionCaseInsensitive error:&error];
        NSArray *aMatches = [regex matchesInString:attributes options:0 range:NSMakeRange(0, [attributes length])];
        for (NSTextCheckingResult *aMatch in aMatches)
        {
            NSString *aName = [attributes substringWithRange:[aMatch rangeAtIndex:1]];
            NSString *aValue = [attributes substringWithRange:[aMatch rangeAtIndex:2]];
            
            NSArray *nameParts = [aName componentsSeparatedByString:@":"];
            if (nameParts.count > 1)
            {
                if (([[[nameParts objectAtIndex:0] lowercaseString] isEqualToString:@"xmlns"]) &&
                    (([[nameParts objectAtIndex:1] isEqualToString:nameSpace])))
                {
                    namespaceMatch = [aValue isEqualToString:@"http://www.w3.org/2004/08/xop/include"];
                }
            }
            
            if ([[aName lowercaseString] isEqualToString:@"href"])
                reference = aValue;
        }        
        
        // Extract the ContentID value from the href value
        NSString *ref = nil;
        NSArray *refParts = [reference componentsSeparatedByString:@":"];
        if (refParts.count > 1)
        {
            if ([[[refParts objectAtIndex:0] lowercaseString] isEqualToString:@"cid"])
                ref = [refParts objectAtIndex:1];
        }
        
        // Add the reference, being as particular as the user asked
        if (pedantic)
        {
            // Only count this as an XOP+XML reference if the namespace matches and the reference
            // string is a pointer to a ContentID 
            if (namespaceMatch && (ref.length > 0))
                [references addObject:ref];
        }
        else
        {
            // Strip the CID: prefix if we have one, or just include the reference
            if (ref.length > 0)
                [references addObject:ref];
            else
                [references addObject:reference];
        }
    }
    
    if (references.count == 0)
        return nil;
    else
        return references;
}

@end
