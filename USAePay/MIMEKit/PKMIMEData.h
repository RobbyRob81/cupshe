//
//  PKMIMEData.h
//
//  Created by Jeff Hay on 3/27/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


/**
 * General MIME-encoded data handling class.  
 *
 * `PKMIMEData` encapsulates a MIME message, including headers and data bytes (a MIME "object").  All data is stored in-memory in raw 
 * binary format, but can be set and returned in any of the valid `MIMETransferEncoding`s.  
 * 
 * All `PKMIMEData` objects are mutable.
 */

#if !TARGET_OS_MAC
#import <UIKit/UIKit.h>
#endif

#import "PKContentType.h"
#import "NSData+MIMETransferEncoding.h"

@interface PKMIMEData : NSObject
{    
    NSData *_data;
    MIMETransferEncodingStyle _transferEncoding;
    PKContentType *_contentType;
    NSString *_contentID;
    
    NSMutableDictionary *_headers;
}

/** @name Properties */

/** 
 * The transfer encoding used for this data.  
 *
 * This is the format of the data bytes as transferred (i.e., in an email or HTTP request/response). The default value is 
 * `MIMETransferEncodingStyleBinary`; `MIMETransferEncodingStyleBase64` is very often the format used in HTTP request/response calls.
 */
@property (nonatomic) MIMETransferEncodingStyle transferEncoding;

/** 
 * The MIME Content-Type of the data.  
 *
 * Specifies the kind of data (text, image, etc) as well as format (JPG, UTF8, etc.) 
 */
@property (nonatomic, strong) PKContentType *contentType;

/**
 * MIME Content-ID string specified for this data.  
 *
 * This can be thought of as the "name" of the data (often a filename, etc.).  Strictly speaking, the MIME standard requires this
 * to be a globally unique ID with a name and domain sections seperated by the "at" sign (for instance, "uniqueItemName@place.com"),
 * but many implementations relax this standard.
 */
@property (nonatomic, strong) NSString *contentID;

/** 
 * Dictionary containing MIME header information associated with this data.  
 *
 * In the MIME ecoding, headers appear as `Name:Value` pairs on individiual lines before the encoded data.  For instance,
 *
 *    `Content-ID: "Hello"`
 *
 *  In the headers dictionary, the header value (`"Hello"`) is an NSString value stored for the key name (`"Content-ID"`)
 *
 *  @warning Header strings currently are expected to ONLY contain UTF-8 strings, with no encoding (this is *not* fully MIME-compliant)
 **/
@property (nonatomic, readonly) NSMutableDictionary *headers;

/** @name Initialization */

/**
 * Create a new `PKMIMEData` object based on the provided MIME headers.
 *
 * Creates and initializes a new instance with the given MIME headers.  The _headers_ dictionary consists of header name keys and
 * value strings as in the headers property.  If headers specifies `Content-Transfer-Encoding` and/or `Content-Type`, those values
 * will be used to decode any data assigned to the reciver via setData:.
 *
 * \param headers dictionary containing `name`:`value` tuples specifing header values
 * \returns A newly instantiated object with the given headers
 * \sa headers
 * \sa setData:
 **/
+(PKMIMEData *) dataWithHeaders:(NSDictionary *)headers;

/**
 * Create a new `PKMIMEData` object with the the provided MIME headers and data.
 *
 * Creates and initializes a new instance with the given MIME headers.  The `headers` dictionary consists of header name keys and
 * value strings as in the headers property.  The _data_ paramter is assumed to be the MIME data with the default transfer encoding
 * (`MIMETransferEncodingBinary`) and charset (`us-ascii`) unless otherwise specified in _headers_ (with the values of the
 * `Content-Transfer-Encoding` and/or `Content-Type` header keys)
 *
 * \param data MIME message to initialize receiver with
 * \param headers dictionary containing `name`:`value` tuples specifing header values
 * \returns A newly instantiated object initialized with the given headers and data
 * \sa headers
 **/
+(PKMIMEData *) dataFromData:(NSData *)data andHeaders:(NSDictionary *)headers;

/**
 * Create a new `PKMIMEData` object with the the provided _contentType_ and _data_.
 *
 * Creates and initializes a new instance with the given _data_.  The _data_ paramter is assumed to be the MIME data with the default transfer 
 * encoding (`MIMETransferEncodingBinary`) and other formatting information is drawn from the given _contentType_.
 *
 * \param data MIME message to initialize receiver with
 * \param contentType MIME content type description of the data
 * \returns A newly instantiated object initialized with the given and data and content type
 **/
+(PKMIMEData *) dataFromData:(NSData *)data withContentType:(PKContentType *)contentType;

/**
 * Create a new `PKMIMEData` object with the the provided _contentType_ and _data_.
 *
 * Creates and initializes a new instance with the given _data_.  The _data_ paramter is assumed to be the MIME data with the default transfer 
 * encoding (`MIMETransferEncodingBinary`) and other formatting information is drawn from the given _contentType_.  The MIME Content-ID header
 * is set to the value given by _contentID_.
 *
 * \param data MIME message to initialize receiver with
 * \param contentType MIME content type description of the data
 * \param contentID String to use for Content-ID header (the _contentID_ property of the resulting PKMIMEData instance)
 * \returns A newly instantiated object initialized with the given and data and content type
 **/
+(PKMIMEData *) dataFromData:(NSData *)data withContentType:(PKContentType *)contentType andContentID:(NSString *)contentID;

/**
 * Create a new `PKMIMEData` object with the the provided MIME data string.
 *
 * Creates and initializes a new instance from the provided _dataString_.  _dataString_ is expected to be a MIME message as read from a
 * communication link.  It must consist of an encoded MIME data block, optionally preceeded by a series of `header`=`value` tuples seperated 
 * by `CRLF` sequences (ending with an empty line denoted by a second `CRLF` sequence).
 *
 * This method can usually be used to decode MIME data directly from an HTTP response or email message download.
 *
 * \param dataString String containing entire MIME message (with optional headers) to initialize the receiver with
 * \returns A newly instantiated object initialized with the given headers and data
 * \sa headers
 **/
+(PKMIMEData *) dataFromStringWithHeaders:(NSString *)dataString;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and parameters.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be MIME data with provided
 * _dataEncoding_ charset encoded by the given _transferEncoding_ (data is decoded from the indicated _transferEncoding_ prior to 
 * being stored, and the `Content-Transfer-Encoding` and `Content-Type` header values are set appropriately).  In addition, the
 * `Content-ID` header for the  data is set to _contentID_.
 *
 * \param data MIME message to initialize receiver with
 * \param format Charset used to represent the data
 * \param transferEncoding MIME transfer encoding used to encode the string
 * \param contentID String to identify the data (data "name")
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data format:(NSStringEncoding)dataEncoding transferEncoding:(MIMETransferEncodingStyle)transferEncoding contentID:(NSString *)contentID;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and MIME header values.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be MIME data with provided
 * _dataEncoding_ charset encoded by the given _transferEncoding_ (data is decoded from the indicated _transferEncoding_ prior to 
 * being stored, and the `Content-Transfer-Encoding` and `Content-Type` header values are set appropriately).
 *
 * \param data MIME message to initialize receiver with
 * \param format Charset used to represent the data
 * \param transferEncoding MIME transfer encoding used to encode the string
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data format:(NSStringEncoding)dataEncoding transferEncoding:(MIMETransferEncodingStyle)transferEncoding;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and MIME header values.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be raw MIME data with provided
 * _dataEncoding_ charset (`Content-Transfer-Encoding` header value is set to `MIMETransferEncodingStyleBinary`).  In addition, the
 * `Content-ID` header for the  data is set to _contentID_.
 *
 * \param data MIME message to initialize receiver with
 * \param format Charset used to represent the data
 * \param contentID String to identify the data (data "name")
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data format:(NSStringEncoding)dataEncoding contentID:(NSString *)contentID;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and MIME header values.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be raw MIME data with provided
 * _dataEncoding_ charset (`Content-Transfer-Encoding` header value is set to `MIMETransferEncodingStyleBinary`).
 *
 * \param data MIME message to initialize receiver with
 * \param format Charset used to represent the data
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data format:(NSStringEncoding)dataEncoding;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and MIME header values.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be raw MIME data with
 * the UTF8 charset (`Content-Transfer-Encoding` header value is set to `MIMETransferEncodingStyleBinary`).  In addition, the
 * `Content-ID` header for the  data is set to _contentID_.
 *
 * \param data MIME message to initialize receiver with
 * \param contentID String to identify the data (data "name")
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data contentID:(NSString *)contentID;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and parameters.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be MIME data with  the
 * UTF-8 charset encoded by the given _transferEncoding_ (data is decoded from the indicated _transferEncoding_ prior to 
 * being stored, and the `Content-Transfer-Encoding` is set appropriately).
 *
 * \param data MIME message to initialize receiver with
 * \param transferEncoding MIME transfer encoding used to encode the string
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data transferEncoding:(MIMETransferEncodingStyle)transferEncoding;

/**
 * Create a new `PKMIMEData` object with the the provided raw data and MIME header values.
 *
 * Creates and initializes a new instance with the given MIME data.  The _data_ paramter is assumed to be raw MIME data with the
 * UTF8 charset.
 *
 * \param data MIME message to initialize receiver with
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithData:(NSData *)data;

/**
 * Create a new `PKMIMEData` object with the the provided MIME message data and parameters.
 *
 * Creates and initializes a new instance with the given MIME data.  The _string_ paramter is assumed to be a MIME message data
 * encoded by the given _transferEncoding_.  In addition, the `Content-ID` header for the  data is set to _contentID_.
 *
 * \param string MIME message to initialize receiver with
 * \param encoding MIME transfer encoding used to encode the string
 * \param contentID String to identify the data (data "name")
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithString:(NSString *)string usingEncoding:(MIMETransferEncodingStyle)encoding withContentID:(NSString *)contentID;

/**
 * Create a new `PKMIMEData` object with the the provided MIME message data and parameters.
 *
 * Creates and initializes a new instance with the given MIME data.  The _string_ paramter is assumed to be a MIME message data
 * encoded by the given _transferEncoding_.
 *
 * \param string MIME message to initialize receiver with
 * \param encoding MIME transfer encoding used to encode the string
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithString:(NSString *)string usingEncoding:(MIMETransferEncodingStyle)encoding;

/**
 * Create a new `PKMIMEData` object with the the provided MIME message data and parameters.
 *
 * Creates and initializes a new instance with the given MIME data.  The _string_ paramter is assumed to be a MIME message 
 * containing binary data (no encoding), and is treated as UTF-8 data.
 *
 * \param string MIME message to initialize receiver with
 * \returns A newly instantiated object initialized with the given data and parameters
 **/
-(id) initWithString:(NSString *)string;

/** @name Setting Data */

/**
 * Assign the given data to the MIME data object
 *
 * Decodes the _data_ according to the currently-set contentType and transferEncoding, and assigns the decoded data to the MIME message.
 * Only the `Content-Length` header is changed.
 *
 * \param data Data to decode and assign to MIME message
 **/
-(void) setData:(NSData *)data;

/**
 * Assign the given data to the MIME data object
 *
 * This method sets contentType to _format_ and transferEncoding to _encoding_, and then calls setData: to assign the data to the MIME message.
 * Changes the value of the `Content-Type` and `Content-Transfer-Encoding` headers in addition to the headers changed by setData:
 *
 * \param data Data to decode and assign to MIME message
 * \param format Character set used for the data (changes the receiver's contentType)
 * \param encoding MIME data encoding method used for the data (changed the receiver's transferEncoding)
 **/
-(void) setData:(NSData *)data format:(NSStringEncoding)format transferEncoding:(MIMETransferEncodingStyle)encoding;

/** @name Querying Data */

/**
 * Retreive the encoded MIME data
 *
 * \returns Data encoded with the currently-set transferEncoding
 * \sa rawData
 * \sa dataString
 **/
-(NSData *) data;

/**
 * Retreive the raw, un-encoded MIME data
 *
 * \returns Raw data bytes, regardless of currently-set transferEncoding.
 * \sa data
 * \sa rawDataString
 **/
-(NSData *) rawData;

/**
 * Retreive the encoded MIME data as a string
 *
 * \returns data encoded as a string with the encoding suggested by the currently-set contentType
 * \sa rawDataString
 * \sa data
 **/
-(NSString *) dataString;

/**
 * Retreive the raw, un-encoded MIME data as a string
 *
 * \returns Raw data bytes, regardless of currently-set transferEncoding, as a string with the encoding suggested by the currently-set contentType.
 * \sa dataString
 * \sa rawData
 **/
-(NSString *) rawDataString;

/** @name Setting Header Values */

/**
 * Add custom headers to the MIME message from a dictionary of headers. 
 *
 * The dictionary is assumed to contain keys of header names and values of header values.  This method will replace the value of 
 * previously set header names, but will NOT replace any of the standard MIME headers: `Content-Type`, `Content-ID`, and `Content-Transfer-Encoding`
 * If these headers are found int _headers_, they are ignored.  If any non-string values are found in _headers)_, they are ignored.wa
 *
 * @warning Header value and name strings currently are expected to ONLY contain UTF-8 strings, with no encoding 
 * (this is *not* fully MIME-compliant)
 * @param headers A dictionary of `header`:`value` tuples describing the MIME data
 **/
-(void) addHeaders:(NSDictionary *)headers;

/**
 * Set all headers to the MIME message from a dictionary of headers. 
 *
 * The dictionary is assumed to contain keys of header names and values of header values.  This method clears all currently-set header
 * values with clearHeaders:, and sets the value of all header names found in _headers_, including the standard MIME headers: 
 * `Content-Type`, `Content-ID`, and `Content-Transfer-Encoding`.  If any non-string values are found in _headers)_, they are ignored.
 *
 * @warning Header value and name strings currently are expected to ONLY contain UTF-8 strings, with no encoding 
 * (this is *not* fully MIME-compliant)
 * @param headers A dictionary of `header`:`value` tuples describing the MIME data
 **/
-(void) setHeadersFromDictionary:(NSDictionary *)headers;

/**
 * Translate a series of header lines into a header dictionary
 *
 * Parses _headerString_ as a series of "HeaderName = HeaderValue" lines seperated by _CRLF_, and creates a dictionary of `name`:`value` tuples
 * suitable for passing into header-setting methods.
 *
 * \param Header lines seperated by `CRLF`
 * \returns Dictionary containing header tuples
 **/
+(NSMutableDictionary *) headersFromStrings:(NSString *)headerString;

/** @name Removing Headers */

/**
 * Remove the value for the header with the given _name_
 *
 * If a header with a name of _name_ is found, it's value is cleared.  This method will not completely remove the standard MIME headers: 
 * `Content-Type`, `Content-ID`, and `Content-Transfer-Encoding` (which are calculated as needed).  If _name_ is not the name of a custom
 * header, no action is taken.
 *
 * \param name Name of header to remove
 **/
-(void) removeHeaderWithName:(NSString *)name;

/**
 * Remove the value of all custom headers
 *
 * Clears all header names found in headers.  This method effectively calls removeHeaderWithName: for every item in [headers allKeys].  This 
 *  method will not completely remove the standard MIME headers: `Content-Type`, `Content-ID`, and `Content-Transfer-Encoding` 
 * (which are calculated as needed).
 *
 **/
-(void) clearHeaders;

/** @name Querying Headers */

/**
 * Retreive the value for the header with the given _name_
 *
 * If a header with a name of _name_ is found, return its value. If no header with a name of _name_ is found, returns nil.
 *
 * \param name Name of header to retreive
 * \returns Value of the header named _name_, or `nil` if not found
 **/
-(NSString *) headerWithName:(NSString *)name;

/**
 * Return a string containing all header strings seperated by `CRLF` characters, suitable for sending
 * to a MIME receiver
 *
 * MIME decoders expect all headers to preceed the encoded data, with each header on a seperate line seperated by `CRLF` characters.  This 
 * method returns an NSString containing all set and calculated headers in the required format.  The string does NOT contain the empty line
 * at the end to seperate MIME headers and data.
 *
 * The return value from this function is suitable for sending to a MIME agent.  If reporting headers to log files, console, etc., it  
 * might be better to use headerStringsForDisplay.
 *
 * \returns String containing all headers seperated by `CRLF` characters
 * \sa headerStringForDisplay
 **/
-(NSString *) headerStrings;

/**
 * Return a string containing all header strings seperated by just a newline character, suitable for
 * displaying, printing in logs, etc.  
 *
 * MIME decoders expect header lines to seperated by `CRLF` characters, which end up displaying as two newlines when displayed with NSLog()
 * or otherwise printed on MacOS or iOS.  This method returns the same header strings as headerStrings, but seperated by only a single
 * newline character.  This makes for better display, but should **NEVER** be sent to a MIME decoding agent.
 *
 * \returns String containing all headers seperated by single newline characters
 * @warning Do NOT send this string to a MIME decoder.
 * \sa headerStrings
 **/
-(NSString *) headerStringsForDisplay;

@end
