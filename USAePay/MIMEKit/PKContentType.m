//
//  PKContentType.m
//
//  Created by Jeff Hay on 3/27/12.
//  Copyright (c) 2012 Portable Knowledge, LLC. All rights reserved.
//
// Portable Knowledge Open Source Component License - Version 1.0 - April 13th, 2012
// 
// Permission is hereby granted, free of charge, to any person or organization`
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRESS
// OR IMPLY ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS
// OF THIS SOFTWARE.


#import "PKContentType.h"

#import "NSString+GUID.h"

@implementation PKContentType

@synthesize mediaType = _contentTypeString;
@synthesize parameters = _contentParameters;

#pragma mark - Lifecycle

-(id) init
{
    if ((self = [super init]) != nil)
    {
        _contentTypeString = @"text/plain";
        _contentParameters = [[NSMutableDictionary alloc] init];
        [_contentParameters setValue:@"UTF-8" forKey:@"charset"];
    }
    return self;
}

-(id) initWithString:(NSString *)contentString
{
    if ((self = [super init]) != nil)
    {
        _contentParameters = [[NSMutableDictionary alloc] initWithCapacity:1];

        NSArray *parts = [contentString componentsSeparatedByString:@";"];
        NSString *content = [[parts objectAtIndex:0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        _contentTypeString = [content stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"\""]];
        
        if (parts.count > 1)
        {
            NSRange partRange;
            partRange.location = 1;
            partRange.length = parts.count - 1;
            [self setParametersFromArray:[parts subarrayWithRange:partRange]];
        }
    }
    
    if ((self.isMultipart) && (self.boundary.length == 0))
        self.boundary = [NSString stringWithFormat:@"%@", [NSString stringWithNewGUID]];
    
    return self;
}

-(id) initWithEncoding:(NSStringEncoding)encoding
{
    if (!(self = [self init])) return nil;
    self.charSetEncoding = encoding;
    return self;
}


+(PKContentType *) contentTypeFromString:(NSString *)contentString
{
    return [[PKContentType alloc] initWithString:contentString];
}

+(PKContentType *) contentTypeFromEncoding:(NSStringEncoding)encoding
{
    return [[PKContentType alloc] initWithEncoding:encoding];
}

#pragma mark - Parameter Handling

-(void) setParameterWithName:(NSString *)name andValue:(NSString *)value
{
    // Trim all leading and trailing whitespace characters and quotes
    NSMutableCharacterSet *removableCharSet = [NSMutableCharacterSet 
                                               characterSetWithBitmapRepresentation:[[NSCharacterSet whitespaceCharacterSet] bitmapRepresentation]];
    [removableCharSet addCharactersInString:@"\""];

    [_contentParameters setValue:[value stringByTrimmingCharactersInSet:removableCharSet] 
                          forKey:[name stringByTrimmingCharactersInSet:removableCharSet]];
}

-(void) setParametersFromArray:(NSArray *)parameters
{
    for (id Part in parameters)
    {
        if ([Part isKindOfClass:[NSString class]])
        {
            NSArray *split = [Part componentsSeparatedByString:@"="];
            if (split.count > 1)
                [self setParameterWithName:[split objectAtIndex:0] andValue:[split objectAtIndex:1]];
        }
    }
}
                                           
-(void) setParametersFromString:(NSString *)parameterString
{
    [self setParametersFromArray:[parameterString componentsSeparatedByString:@";"]];
}

-(NSString *)parameterWithName:(NSString *)name
{
    return [_contentParameters objectForKey:name];
}

-(void) removeParameterWithName:(NSString *)name
{
    [_contentParameters removeObjectForKey:name];
}

-(void) removeParameters
{
    [_contentParameters removeAllObjects];
}

#pragma mark - Display and Retreival

-(NSString *)string
{
    NSMutableString *strContentType = [[NSMutableString alloc] initWithCapacity:(1 + _contentParameters.allKeys.count)];
    
    [strContentType appendString:_contentTypeString];
    for (NSString *parameter in _contentParameters.allKeys)
    {
        NSString *value = [_contentParameters valueForKey:parameter];
        if ([value length] == 0)
            [strContentType appendFormat:@"; %@", parameter];
        else
            [strContentType appendFormat:@"; %@=\"%@\"", parameter, value];
    }
    
    return [NSString stringWithString:strContentType];
}
      
-(NSString *)type
{
    NSArray *parts = [_contentTypeString componentsSeparatedByString:@"/"];
    return [parts objectAtIndex:0];
}

-(NSString *)subType
{
    NSArray *parts = [_contentTypeString componentsSeparatedByString:@"/"];
    if (parts.count > 1)
        return [parts objectAtIndex:1];
    return nil;
}

-(void) setSubType:(NSString *)subType
{
    NSString *type = [self type];
    
    _contentTypeString = [NSString stringWithFormat:@"%@/%@", type, subType];
}

-(BOOL) isText
{
    return [[self.type lowercaseString] isEqualToString:@"text"];
}

-(BOOL) isImage
{
    return [[self.type lowercaseString] isEqualToString:@"image"];
}

-(BOOL) isAudio
{
    return [[self.type lowercaseString] isEqualToString:@"audio"];
}

-(BOOL) isVideo
{
    return [[self.type lowercaseString] isEqualToString:@"video"];
}

-(BOOL) isApplication
{
    return [[self.type lowercaseString] isEqualToString:@"application"];
}

-(BOOL) isData
{
    return self.isApplication;
}

-(BOOL) isMultipart
{
    return [[self.type lowercaseString] isEqualToString:@"multipart"];
}

-(BOOL) isMessage
{
    return [[self.type lowercaseString] isEqualToString:@"message"];
}

#pragma mark - Shortcuts for common parameters

-(NSString *) charSet
{
    return [_contentParameters valueForKey:@"charset"];
}

-(void) setCharSet:(NSString *)charSet
{
    [self setParameterWithName:@"charset" andValue:charSet];
}

-(NSStringEncoding) charSetEncoding
{
    return NSUTF8StringEncoding;
    
    NSString *charSet = [self.charSet uppercaseString];
    if ([charSet isEqualToString:@"UTF-8"])
        return NSUTF8StringEncoding;
    else if ([charSet isEqualToString:@"UTF-16"])
        return NSUTF16StringEncoding;
    else if ([charSet isEqualToString:@"UTF-16BE"])
        return NSUTF16BigEndianStringEncoding;
    else if ([charSet isEqualToString:@"UTF-16LE"])
        return NSUTF16LittleEndianStringEncoding;
    else if ([charSet isEqualToString:@"UTF-32"])
        return NSUTF32StringEncoding;
    else if ([charSet isEqualToString:@"UTF-32BE"])
        return NSUTF32BigEndianStringEncoding;
    else if ([charSet isEqualToString:@"UTF-32LE"])
        return NSUTF32LittleEndianStringEncoding;
    else if ([charSet isEqualToString:@"ISO-8859-1"])
        return NSISOLatin1StringEncoding;
    else if ([charSet isEqualToString:@"ISO-8859-2"])
        return NSISOLatin2StringEncoding;
    else if ([charSet isEqualToString:@"EUC-JP"])
        return NSJapaneseEUCStringEncoding;
    else if ([charSet isEqualToString:@"Shift_JIS"])
        return NSShiftJISStringEncoding;
    else if ([charSet isEqualToString:@"ISO-2022-JP"])
        return NSISO2022JPStringEncoding;
    else if ([charSet isEqualToString:@"windows-1250"])
        return NSWindowsCP1250StringEncoding;
    else if ([charSet isEqualToString:@"windows-1251"])
        return NSWindowsCP1251StringEncoding;
    else if ([charSet isEqualToString:@"windows-1252"])
        return NSWindowsCP1252StringEncoding;
    else if ([charSet isEqualToString:@"windows-1253"])
        return NSWindowsCP1253StringEncoding;
    else if ([charSet isEqualToString:@"windows-1254"])
        return NSWindowsCP1254StringEncoding;
    else if ([charSet isEqualToString:@"hp-roman8"])
        return NSMacOSRomanStringEncoding;

    return NSASCIIStringEncoding;
}

-(void) setCharSetEncoding:(NSStringEncoding)encoding
{
    switch (encoding)
    {
        case NSASCIIStringEncoding: [self setParameterWithName:@"charset" andValue:@"US-ASCII"]; break;            
        case NSUTF8StringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-8"]; break;            
        case NSUTF16StringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-16"]; break;            
        case NSUTF16BigEndianStringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-16BE"]; break;            
        case NSUTF16LittleEndianStringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-16LE"]; break;            
        case NSUTF32StringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-32"]; break;            
        case NSUTF32BigEndianStringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-32BE"]; break;            
        case NSUTF32LittleEndianStringEncoding: [self setParameterWithName:@"charset" andValue:@"UTF-32LE"]; break;            
        case NSISOLatin1StringEncoding: [self setParameterWithName:@"charset" andValue:@"ISO-8859-1"]; break;            
        case NSISOLatin2StringEncoding: [self setParameterWithName:@"charset" andValue:@"ISO-8859-2"]; break;            
        case NSJapaneseEUCStringEncoding: [self setParameterWithName:@"charset" andValue:@"EUC-JP"]; break;            
        case NSShiftJISStringEncoding: [self setParameterWithName:@"charset" andValue:@"Shift_JIS"]; break;            
        case NSISO2022JPStringEncoding: [self setParameterWithName:@"charset" andValue:@"ISO-2022-JP"]; break;            
        case NSWindowsCP1250StringEncoding: [self setParameterWithName:@"charset" andValue:@"windows-1250"]; break;            
        case NSWindowsCP1251StringEncoding: [self setParameterWithName:@"charset" andValue:@"windows-1251"]; break;            
        case NSWindowsCP1252StringEncoding: [self setParameterWithName:@"charset" andValue:@"windows-1252"]; break;            
        case NSWindowsCP1253StringEncoding: [self setParameterWithName:@"charset" andValue:@"windows-1253"]; break;            
        case NSWindowsCP1254StringEncoding: [self setParameterWithName:@"charset" andValue:@"windows-1254"]; break;            
        case NSMacOSRomanStringEncoding: [self setParameterWithName:@"charset" andValue:@"hp-roman8"]; break;
        default: [self setParameterWithName:@"charset" andValue:nil];
    }
}
            
-(NSString *) boundary
{
    return [_contentParameters valueForKey:@"boundary"];
}

-(void) setBoundary:(NSString *)boundary
{
    [self setParameterWithName:@"boundary" andValue:boundary];
}
@end
